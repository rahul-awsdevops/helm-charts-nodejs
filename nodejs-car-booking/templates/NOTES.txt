# Car Booking Application Helm Chart

Thank you for installing the `car-booking` Helm chart (version 0.3.0)!

This chart deploys a stateful Node.js application with a PostgreSQL backend on an Amazon EKS cluster, managed via ArgoCD for a GitOps workflow.

## Accessing the Application
The application is exposed via an AWS Application Load Balancer (ALB) using an Ingress resource. To access it:

1. **Get the ALB URL**:
   ```bash
   kubectl get ingress -n default
   ```
   Look for the `ADDRESS` column in the output to find the ALB URL (e.g., `http://<alb-url>`).

2. **Test the Application**:
   Access the application at `http://<alb-url>/`. For example:
   ```bash
   curl http://<alb-url>/
   ```

## Application Components
- **Node.js Application**:
  - Deployment: `car-booking`
  - Service: `car-booking-service` (ClusterIP, port 80)
  - Connects to PostgreSQL using environment variables `POSTGRES_HOST=postgres`, `POSTGRES_DB=carbooking`, and `POSTGRES_USER=postgres`.
  - Password is sourced from the `postgres-secret` Secret.

- **PostgreSQL Database**:
  - StatefulSet: `postgres` (1 replica for simplicity; replication requires additional configuration)
  - Service: `postgres` (ClusterIP, port 5432)
  - Persistent Volume Claim: `pgdata-postgres-0` (8Gi, using `ebs-sc` StorageClass)
  - Uses the `postgres-secret` Secret for the password.

- **Ingress**:
  - Ingress: `ingress-nginxapp1`
  - IngressClass: `my-aws-ingress-class` (AWS ALB controller)
  - Routes traffic from `/` to the `car-booking-service` on port 80.

- **Storage**:
  - StorageClass: `ebs-sc` (AWS EBS CSI driver, gp3 volumes)
  - Ensure the AWS EBS CSI driver is installed in the EKS cluster.

## Verifying the Deployment
Check the status of the deployed resources:
```bash
kubectl get pods,svc,pvc,ingress -n default
```

Verify the ArgoCD application status:
```bash
argocd app get car-booking
```

## Accessing ArgoCD
This chart is managed by ArgoCD. To access the ArgoCD UI:
1. Port-forward the ArgoCD server:
   ```bash
   kubectl port-forward svc/argocd-server -n argocd 8080:443
   ```
2. Get the admin password:
   ```bash
   kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
   ```
3. Access the UI at `https://localhost:8080` with username `admin` and the password.

## Configuration Notes
- **Secrets**: The PostgreSQL password is stored in the `postgres-secret` Secret. For security, avoid hardcoding the password in `values.yaml`. Use AWS Secrets Manager with the External Secrets Operator:
  ```bash
  helm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace
  ```
  Create an `ExternalSecret` to sync the password from AWS Secrets Manager.

- **Storage**: Ensure the AWS EBS CSI driver is installed:
  ```bash
  helm install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver --namespace kube-system
  ```

- **Ingress**: The AWS Load Balancer Controller must be installed for the ALB to work:
  ```bash
  helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=<your-cluster-name>
  ```

## Updating the Application
To update the application or Helm chart:
1. Modify the code or Helm chart in the GitHub repository (`https://github.com/your-username/nodejs-stateful-app`).
2. Commit and push changes to the `main` branch.
3. ArgoCD will automatically sync the changes due to the `syncPolicy.automated` setting.

## Troubleshooting
- **Pods Not Running**:
  - Check pod logs: `kubectl logs <pod-name> -n default`
  - Verify the ECR image is accessible: Ensure the ArgoCD service account has IAM permissions for `ecr:GetDownloadUrlForLayer`, `ecr:BatchGetImage`, and `ecr:BatchCheckLayerAvailability`.

- **Ingress Issues**:
  - Confirm the AWS Load Balancer Controller is running: `kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller`
  - Check the ALB status in the AWS Console (EC2 > Load Balancers).

- **PostgreSQL Issues**:
  - For multiple replicas, configure PostgreSQL replication (e.g., using Patroni) or use a single replica (`replicas: 1`).
  - Verify the PVC is bound: `kubectl get pvc -n default`.

## Cleanup
To remove the application:
```bash
argocd app delete car-booking --cascade
```

For further assistance, refer to the GitHub repository or contact the administrator.